// Code generated by Kitex v0.8.0. DO NOT EDIT.

package stockservice

import (
	"context"
	stock "example_shop/kitex_gen/example/shop/stock"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return stockServiceServiceInfo
}

var stockServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "StockService"
	handlerType := (*stock.StockService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetItemStock": kitex.NewMethodInfo(getItemStockHandler, newStockServiceGetItemStockArgs, newStockServiceGetItemStockResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "stock",
		"ServiceFilePath": `idl/stock.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func getItemStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*stock.StockServiceGetItemStockArgs)
	realResult := result.(*stock.StockServiceGetItemStockResult)
	success, err := handler.(stock.StockService).GetItemStock(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newStockServiceGetItemStockArgs() interface{} {
	return stock.NewStockServiceGetItemStockArgs()
}

func newStockServiceGetItemStockResult() interface{} {
	return stock.NewStockServiceGetItemStockResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetItemStock(ctx context.Context, req *stock.GetItemStockReq) (r *stock.GetItemStockResp, err error) {
	var _args stock.StockServiceGetItemStockArgs
	_args.Req = req
	var _result stock.StockServiceGetItemStockResult
	if err = p.c.Call(ctx, "GetItemStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
